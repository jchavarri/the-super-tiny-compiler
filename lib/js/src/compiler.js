// Generated by BUCKLESCRIPT VERSION 1.9.3, PLEASE EDIT WITH CARE
'use strict';

var Char         = require("bs-platform/lib/js/char.js");
var List         = require("bs-platform/lib/js/list.js");
var Block        = require("bs-platform/lib/js/block.js");
var Caml_string  = require("bs-platform/lib/js/caml_string.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");

function explode(s) {
  var _i = s.length - 1 | 0;
  var _l = /* [] */0;
  while(true) {
    var l = _l;
    var i = _i;
    if (i < 0) {
      return l;
    } else {
      _l = /* :: */[
        Caml_string.get(s, i),
        l
      ];
      _i = i - 1 | 0;
      continue ;
      
    }
  };
}

function tokenizer(input) {
  var _input = explode(input);
  var _tokens = /* [] */0;
  while(true) {
    var tokens = _tokens;
    var input$1 = _input;
    if (input$1) {
      var c = input$1[0];
      var exit = 0;
      var exit$1 = 0;
      var exit$2 = 0;
      var switcher = c - 9 | 0;
      if (switcher > 4 || switcher < 0) {
        var switcher$1 = switcher - 23 | 0;
        if (switcher$1 > 9 || switcher$1 < 0) {
          exit$2 = 3;
        } else {
          switch (switcher$1) {
            case 0 : 
                _input = input$1[1];
                continue ;
                case 2 : 
                if (tokens) {
                  var match = tokens[0];
                  if (typeof match === "number") {
                    exit$1 = 2;
                  } else if (match.tag === 2) {
                    var match$1 = tokens[1];
                    if (match$1) {
                      if (match$1[1]) {
                        exit$1 = 2;
                      } else {
                        _tokens = /* :: */[
                          /* String */Block.__(1, [match[0]]),
                          /* :: */[
                            match$1[0],
                            /* [] */0
                          ]
                        ];
                        _input = input$1[1];
                        continue ;
                        
                      }
                    } else {
                      exit$1 = 2;
                    }
                  } else {
                    exit$1 = 2;
                  }
                } else {
                  exit$1 = 2;
                }
                break;
            case 1 : 
            case 3 : 
            case 4 : 
            case 5 : 
            case 6 : 
            case 7 : 
                exit$2 = 3;
                break;
            case 8 : 
                _tokens = /* :: */[
                  /* OpenParen */0,
                  tokens
                ];
                _input = input$1[1];
                continue ;
                case 9 : 
                _tokens = /* :: */[
                  /* CloseParen */1,
                  tokens
                ];
                _input = input$1[1];
                continue ;
                
          }
        }
      } else if (switcher === 3 || switcher === 2) {
        exit$2 = 3;
      } else {
        _input = input$1[1];
        continue ;
        
      }
      if (exit$2 === 3) {
        if (tokens) {
          var match$2 = tokens[0];
          if (typeof match$2 === "number") {
            exit$1 = 2;
          } else if (match$2.tag === 2) {
            var match$3 = tokens[1];
            if (match$3) {
              if (match$3[1]) {
                exit$1 = 2;
              } else {
                _tokens = /* :: */[
                  /* AccString */Block.__(2, [match$2[0] + Char.escaped(c)]),
                  /* :: */[
                    match$3[0],
                    /* [] */0
                  ]
                ];
                _input = input$1[1];
                continue ;
                
              }
            } else {
              exit$1 = 2;
            }
          } else {
            exit$1 = 2;
          }
        } else {
          exit$1 = 2;
        }
      }
      if (exit$1 === 2) {
        if (c >= 48) {
          if (c >= 58) {
            exit = 1;
          } else {
            var xi = input$1[1];
            var exit$3 = 0;
            if (tokens) {
              var match$4 = tokens[0];
              if (typeof match$4 === "number") {
                exit$3 = 3;
              } else if (match$4.tag) {
                exit$3 = 3;
              } else {
                var match$5 = tokens[1];
                if (match$5) {
                  if (match$5[1]) {
                    exit$3 = 3;
                  } else {
                    _tokens = /* :: */[
                      /* Number */Block.__(0, [match$4[0] + Char.escaped(c)]),
                      /* :: */[
                        match$5[0],
                        /* [] */0
                      ]
                    ];
                    _input = xi;
                    continue ;
                    
                  }
                } else {
                  exit$3 = 3;
                }
              }
            } else {
              exit$3 = 3;
            }
            if (exit$3 === 3) {
              _tokens = /* :: */[
                /* Number */Block.__(0, [Char.escaped(c)]),
                tokens
              ];
              _input = xi;
              continue ;
              
            }
            
          }
        } else if (c !== 34) {
          exit = 1;
        } else {
          _tokens = /* :: */[
            /* AccString */Block.__(2, [""]),
            tokens
          ];
          _input = input$1[1];
          continue ;
          
        }
      }
      if (exit === 1) {
        _tokens = /* :: */[
          /* Other */Block.__(3, [c]),
          tokens
        ];
        _input = input$1[1];
        continue ;
        
      }
      
    } else {
      return List.rev(tokens);
    }
  };
}

console.log(Js_primitive.undefined_to_opt(JSON.stringify(tokenizer("(add 2 4)"))));

exports.explode   = explode;
exports.tokenizer = tokenizer;
/*  Not a pure module */
